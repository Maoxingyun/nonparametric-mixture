print("Hello World")
setwd("D:/HW/科研/Code/nonparametric-mixture/utils")
n
num_of_samples = 1000
x <- rgamma(num_of_samples, shape = 10, scale = 3)
x <- x + rnorm(length(x), mean=0, sd = .1)
p1 <- hist(x,breaks=50, include.lowest=FALSE, right=FALSE)
num_of_samples = 1000
x <- rgamma(num_of_samples, shape = 10, scale = 3)
x <- x + rnorm(length(x), mean=0, sd = .1)
p1 <- hist(x,breaks=50, include.lowest=FALSE, right=FALSE)
num_of_samples = 1000
x <- rgamma(num_of_samples, shape = 10, scale = 3)
x <- x + rnorm(length(x), mean=0, sd = .1)
## # Cramér–von Mises criterion
library('CDFt')
num_of_samples = 1000
mle = vs.test(x = x, "dnorm", extend = TRUE, relax = TRUE)
y <- rnorm(num_of_samples, mle$estimate[1], mle$estimate[2])
result <- CramerVonMisesTwoSamples(x,y)
result.pvalue = 1/6*exp(-result)
#' Goodness of fit
#'
#' @param X Input data matrix.
#' @param all_dist The available distributions.
#' @param cluster_lab Result of nonparametric clustering.
#' @return dist_hash a hashmap<cluster_lab, distribution>; where distribution a list consisting of
#'  \item{name}{distribution name}
#'  \item{parameter}{a parametric vector}
#'
#' @export
library('vsgoftest')
mle = vs.test(x = data, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, mle$estimate[1], 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(data,y)
result.pvalue = 1/6*exp(-result)
mle = vs.test(x = x, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, mle$estimate[1], 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(x,y)
result.pvalue = 1/6*exp(-result)
1 / mle$estimate[2]
mle$estimate[1]
library('CDFt')
num_of_samples = 100000
y <- rgamma(num_of_samples, shape = 10, scale = 3)
res <- CramerVonMisesTwoSamples(x,y)
p.value = 1/6*exp(-res)
num_of_samples = 1000
x <- rgamma(num_of_samples, shape = 10, scale = 3)
x <- x + rnorm(length(x), mean=0, sd = .1)
num_of_samples = 1000
y <- rgamma(num_of_samples, shape = 10, scale = 3)
res <- CramerVonMisesTwoSamples(x,y)
p.value = 1/6*exp(-res)
mle = vs.test(x = data, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, mle$estimate[1], 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(data,y)
result.pvalue = 1/6*exp(-result)
mle = vs.test(x = x, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, mle$estimate[1], 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(x,y)
result.pvalue = 1/6*exp(-result)
y <- rgamma(num_of_samples, 10, 3)
result <- CramerVonMisesTwoSamples(data,y)
result.pvalue = 1/6*exp(-result)
y <- rgamma(num_of_samples, 10, 3)
result <- CramerVonMisesTwoSamples(x,y)
result.pvalue = 1/6*exp(-result)
y <- rgamma(num_of_samples, shape = 10, scale = 3)
res <- CramerVonMisesTwoSamples(x,y)
p.value = 1/6*exp(-res)
mle = vs.test(x = data, "dgamma", extend = TRUE, relax = TRUE)
mle = vs.test(x = x, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, shape = mle$estimate[1], scale = 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(data,y)
y <- rgamma(num_of_samples, shape = 10, scale = 3)
result <- CramerVonMisesTwoSamples(x,y)
result.pvalue = 1/6*exp(-result)
num_of_samples = 1000
x <- rgamma(num_of_samples, shape = 10, scale = 3)
x <- x + rnorm(length(x), mean=0, sd = .1)
mle = vs.test(x = data, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, shape = mle$estimate[1], scale = 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(data,y)
result.pvalue = 1/6*exp(-result)
mle = vs.test(x = data, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, shape = mle$estimate[1], scale = 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(data,y)
result.pvalue = 1/6*exp(-result)
mle = vs.test(x = data, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, shape = mle$estimate[1], scale = 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(data,y)
result.pvalue = 1/6*exp(-result)
mle = vs.test(x = data, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, shape = mle$estimate[1], scale = 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(data,y)
result.pvalue = 1/6*exp(-result)
mle = vs.test(x = x, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, shape = mle$estimate[1], scale = 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(x,y)
result.pvalue = 1/6*exp(-result)
mle = vs.test(x = x, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, shape = mle$estimate[1], scale = 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(x,y)
result.pvalue = 1/6*exp(-result)
mle = vs.test(x = x, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, shape = mle$estimate[1], scale = 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(x,y)
result.pvalue = 1/6*exp(-result)
mle = vs.test(x = x, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, shape = mle$estimate[1], scale = 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(x,y)
result.pvalue = 1/6*exp(-result)
mle = vs.test(x = x, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, shape = mle$estimate[1], scale = 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(x,y)
result.pvalue = 1/6*exp(-result)
mle = vs.test(x = x, "dgamma", extend = TRUE, relax = TRUE)
y <- rgamma(num_of_samples, shape = mle$estimate[1], scale = 1 / mle$estimate[2])
result <- CramerVonMisesTwoSamples(x,y)
result.pvalue = 1/6*exp(-result)
library('goft')
data("strength")
comp_strength <- strength$cstrength # compressive strength
res = lnorm_test(comp_strength)
install.packages("goft")
library('goft')
data("strength")
comp_strength <- strength$cstrength # compressive strength
res = lnorm_test(comp_strength)
library(fitdistrplus)
data("danishuni")
loss <- danishuni$Loss # losses
logloss <- log(loss) # logarithm of losses
logloss <- sort(logloss[logloss > 0]) # only positive observations are kept
gamma_test(logloss)
library(fitdistrplus)
data("danishuni")
loss <- danishuni$Loss # losses
logloss <- log(loss) # logarithm of losses
logloss <- sort(logloss[logloss > 0]) # only positive observations are kept
gamma_test(logloss)
gam.fit <- gamma_fit(logloss); gam.fit # fitting the gamma distribution
data("Snow")
x <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
dbEmpLikeGOF(x = x, testcall = "normal", pvl.Table = FALSE, num.mc = 5000)
install.packages("dbEmpLikeGOF")
?install.packages
install.packages('C:\Users\lenovo\Downloads\dbEmpLikeGOF_1.2.4.tar.gz',repos = NULL)
install.packages('C:\\Users\\lenovo\Downloads\\dbEmpLikeGOF_1.2.4.tar.gz',repos = NULL)
install.packages('C:\\Users\\lenovo\\Downloads\\dbEmpLikeGOF_1.2.4.tar.gz',repos = NULL)
dbEmpLikeGOF(x = x, testcall = "normal", pvl.Table = FALSE, num.mc = 5000)
library('dbEmpLikeGOF')
x <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
dbEmpLikeGOF(x = x, testcall = "normal", pvl.Table = FALSE, num.mc = 5000)
x <- rnorm(10, 0,1)
dbEmpLikeGOF(x = x, testcall = "normal", pvl.Table = FALSE, num.mc = 5000)
centers = 1
dim(centers)
centers = c(1,1)
dim(centers)
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
# dist_hash = GOF_KL(X0, all_dist, cluster_lab) ## vsgoftest package (good)
dist_hash = GOF_KL_soft(X0, all_dist, degree_of_membership, 1/length(result$modes)) ## vsgoftest package
dist_hash <- new.env() ## <cluster_lab, distribution>
## distribution is a list, name = "distribution name", parameter = c(parametric vector)
for(i in 1:length(cluster_hash)){
data = cluster_hash[[as.character(i)]]
significant_level = 0.05
pvalue = -1
## process data, leave only positive number
processed_data = data[data>0]
## fit the distribution
for (j in 1:length(all_dist)) {
if (all_dist[[as.character(j)]] != "norm") {
if (length(processed_data) < 0.5*length(data)) {
next
}
result = vs.test(x = processed_data, densfun = paste("d",all_dist[[as.character(j)]],sep=""))
} else {
result = vs.test(x = data, densfun = paste("d",all_dist[[as.character(j)]],sep=""))
}
if (result$p.value > pvalue) {
pvalue = result$p.value
dist_hash[[as.character(i)]] <- list(name = all_dist[[as.character(j)]], parameter = result$estimate)
}
}
}
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
source("D:/HW/科研/Code/nonparametric-mixture/main_1D.R")
